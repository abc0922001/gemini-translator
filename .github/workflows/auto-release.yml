name: Auto Release

on:
  push:
    branches: [ main ]
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check if version changed
      id: check
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")

        echo "Current version: $CURRENT_VERSION"
        echo "Previous version: $PREVIOUS_VERSION"

        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits
        echo "Generating changelog..."
        
        # Find the latest tag (if any)
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LATEST_TAG" ]; then
          echo "Latest tag found: $LATEST_TAG"
          RANGE="$LATEST_TAG..HEAD"
        else
          echo "No tags found, using all commits"
          # Get all commits since the beginning
          RANGE="HEAD"
        fi
        
        echo "Getting commits in range: $RANGE"
        
        # Generate changelog with better formatting
        if [ -n "$LATEST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $RANGE)
        else
          # For first release, get recent commits (last 10)
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" -10 HEAD)
        fi
        
        # Debug: show what we got
        echo "Raw changelog:"
        echo "$CHANGELOG"
        
        # Handle empty changelog
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Initial release"
        fi
        
        # Set output using proper multiline format
        {
          echo "changelog<<EOF"
          echo "$CHANGELOG"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        echo "Changelog output set successfully"

    - name: Create Release
      run: |
        gh release create v${{ needs.check-version.outputs.new-version }} \
          --title "Release v${{ needs.check-version.outputs.new-version }}" \
          --notes "## What's Changed
        ${{ steps.changelog.outputs.changelog }}

        ## Installation
        \`\`\`bash
        npx @willh/gemini-translator@${{ needs.check-version.outputs.new-version }} --help
        \`\`\`"
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
